// src/services/aiService.js - Servi√ßo para integra√ß√£o com IA
const AI_BASE_URL = import.meta.env.VITE_AI_API_URL || 'http://localhost:3001';

// Fun√ß√£o para gerar insights inteligentes de debriefing
export const generateDebriefingInsights = async (weekData, habitData, userResponses = {}) => {
  try {
    console.log('ü§ñ Gerando insights de debriefing...', { weekData, habitData });

    // Construir prompt contextual
    const prompt = buildDebriefingPrompt(weekData, habitData, userResponses);
    
    const response = await fetch(`${AI_BASE_URL}/api/claude`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({ prompt })
    });

    if (!response.ok) {
      throw new Error(`Erro na API: ${response.status}`);
    }

    const data = await response.json();
    console.log('‚úÖ Insights gerados:', data);

    return {
      success: true,
      insights: data.response,
      timestamp: new Date().toISOString()
    };

  } catch (error) {
    console.error('‚ùå Erro ao gerar insights:', error);
    return {
      success: false,
      error: error.message,
      fallbackMessage: 'N√£o foi poss√≠vel gerar insights no momento. Tente novamente.'
    };
  }
};

// Fun√ß√£o para processar dados por dia no formato real
const processHabitDataByDay = (habitData, weekStart, weekEnd) => {
  console.log('üîÑ Processando dados por dia:', { habitData, weekStart, weekEnd });
  
  // Lista de h√°bitos conhecidos
  const habitLabels = {
    meditar: { name: 'üßò Meditar', emoji: 'üßò' },
    medicar: { name: 'üíä Medicar', emoji: 'üíä' },
    exercitar: { name: 'üèÉ Exercitar', emoji: 'üèÉ' },
    comunicar: { name: 'üí¨ Comunicar', emoji: 'üí¨' },
    alimentar: { name: 'üçé Alimentar', emoji: 'üçé' },
    estudar: { name: 'üìö Estudar', emoji: 'üìö' },
    descansar: { name: 'üò¥ Descansar', emoji: 'üò¥' }
  };

  // Identificar todos os h√°bitos presentes
  const allHabits = new Set();
  Object.values(habitData).forEach(dayData => {
    if (dayData && typeof dayData === 'object') {
      Object.keys(dayData).forEach(key => {
        if (habitLabels[key] !== undefined) {
          allHabits.add(key);
        }
      });
    }
  });

  console.log('üéØ H√°bitos encontrados:', Array.from(allHabits));

  // Processar performance de cada h√°bito
  const habitPerformance = Array.from(allHabits).map(habitKey => {
    let completedDays = 0;
    
    // Contar dias completados para este h√°bito
    Object.entries(habitData).forEach(([dateStr, dayData]) => {
      if (dateStr >= weekStart && dateStr <= weekEnd && dayData && dayData[habitKey] === true) {
        completedDays++;
      }
    });

    const percentage = Math.round((completedDays / 7) * 100);
    
    return {
      name: habitLabels[habitKey]?.name || habitKey,
      emoji: habitLabels[habitKey]?.emoji || '',
      habitKey: habitKey,
      completedDays: completedDays,
      percentage: percentage
    };
  });

  console.log('üìä Performance calculada:', habitPerformance);
  return habitPerformance;
};

// Fun√ß√£o para extrair dados adicionais (peso, observa√ß√µes, sentimentos)
const extractAdditionalData = (habitData, weekStart, weekEnd) => {
  const additionalData = {
    weightData: [],
    observations: [],
    sentiments: []
  };

  Object.entries(habitData).forEach(([dateStr, dayData]) => {
    if (dateStr >= weekStart && dateStr <= weekEnd && dayData && typeof dayData === 'object') {
      // Extrair peso
      if (dayData.peso && typeof dayData.peso === 'number') {
        additionalData.weightData.push({
          date: dateStr,
          weight: dayData.peso
        });
      }

      // Extrair observa√ß√µes
      if (dayData.obs && typeof dayData.obs === 'string' && dayData.obs.trim()) {
        additionalData.observations.push({
          date: dateStr,
          observation: dayData.obs.trim()
        });
      }

      // Extrair sentimentos
      if (dayData.sentimento && typeof dayData.sentimento === 'string') {
        additionalData.sentiments.push({
          date: dateStr,
          sentiment: dayData.sentimento
        });
      }
    }
  });

  return additionalData;
};

// Fun√ß√£o para construir prompt contextual
const buildDebriefingPrompt = (weekData, habitData, userResponses) => {
  console.log('üîç Debug buildDebriefingPrompt:', { weekData, habitData, userResponses });
  
  const weekStart = new Date(weekData.weekStart);
  const weekEnd = new Date(weekData.weekEnd);
  
  // Verificar se habitData existe e tem o formato correto
  if (!habitData || typeof habitData !== 'object') {
    console.warn('‚ö†Ô∏è habitData inv√°lido:', habitData);
    habitData = {};
  }

  // Processar dados no formato real: { "2025-07-20": { meditar: true, exercitar: false } }
  const habitPerformance = processHabitDataByDay(habitData, weekData.weekStart, weekData.weekEnd);
  const additionalData = extractAdditionalData(habitData, weekData.weekStart, weekData.weekEnd);
  
  const totalHabits = habitPerformance.length;
  const completedDays = habitPerformance.reduce((total, habit) => total + habit.completedDays, 0);
  const totalPossibleDays = totalHabits * 7;
  const completionRate = totalPossibleDays > 0 ? Math.round((completedDays / totalPossibleDays) * 100) : 0;

  // Identificar melhores e piores h√°bitos
  const bestHabit = habitPerformance.length > 0 ? 
    habitPerformance.reduce((best, current) => 
      current.percentage > best.percentage ? current : best, habitPerformance[0]) : 
    { name: 'N/A', emoji: '', percentage: 0 };
  
  const worstHabit = habitPerformance.length > 0 ?
    habitPerformance.reduce((worst, current) => 
      current.percentage < worst.percentage ? current : worst, habitPerformance[0]) :
    { name: 'N/A', emoji: '', percentage: 0 };

  const prompt = `
Voc√™ √© um coach de h√°bitos especializado em an√°lise comportamental. Analise esta semana de h√°bitos e forne√ßa insights personalizados:

üìÖ **PER√çODO**: ${weekStart.toLocaleDateString('pt-BR')} - ${weekEnd.toLocaleDateString('pt-BR')}

üìä **ESTAT√çSTICAS GERAIS**:
- Taxa de completude geral: ${completionRate}%
- Total de h√°bitos: ${totalHabits}
- Total de dias completados: ${completedDays}/${totalPossibleDays}

üéØ **PERFORMANCE POR H√ÅBITO**:
${habitPerformance.length > 0 ? 
  habitPerformance.map(habit => 
    `- ${habit.emoji} ${habit.name}: ${habit.completedDays}/7 dias (${habit.percentage}%)`
  ).join('\n') : 
  '- Nenhum dado de h√°bito dispon√≠vel para esta semana'
}

${habitPerformance.length > 0 ? `
üèÜ **DESTAQUE**: ${bestHabit.emoji} ${bestHabit.name} foi o melhor h√°bito (${bestHabit.percentage}%)
‚ö†Ô∏è **ATEN√á√ÉO**: ${worstHabit.emoji} ${worstHabit.name} precisa de mais foco (${worstHabit.percentage}%)
` : ''}

${userResponses.habitComments ? `
üí≠ **COMENT√ÅRIOS DO USU√ÅRIO**:
${Object.entries(userResponses.habitComments).map(([habit, comment]) => 
  comment ? `- ${habit}: "${comment}"` : ''
).filter(Boolean).join('\n')}
` : ''}

${userResponses.proudOf ? `üåü **O que foi bem**: "${userResponses.proudOf}"` : ''}
${userResponses.notSoGood ? `ü§î **Desafios**: "${userResponses.notSoGood}"` : ''}
${userResponses.improveNext ? `üöÄ **Planos**: "${userResponses.improveNext}"` : ''}

${additionalData.weightData.length > 0 ? `
‚öñÔ∏è **DADOS DE PESO**:
${additionalData.weightData.map(w => `- ${w.date}: ${w.weight}kg`).join('\n')}
` : ''}

${additionalData.sentiments.length > 0 ? `
üòä **SENTIMENTOS DA SEMANA**:
${additionalData.sentiments.map(s => `- ${s.date}: ${s.sentiment}`).join('\n')}
` : ''}

${additionalData.observations.length > 0 ? `
üìù **OBSERVA√á√ïES DI√ÅRIAS**:
${additionalData.observations.map(o => `- ${o.date}: "${o.observation}"`).join('\n')}
` : ''}

**INSTRU√á√ïES**: 
Forne√ßa um feedback estruturado em portugu√™s, positivo e construtivo seguindo EXATAMENTE este formato:

## üéâ Parab√©ns!
[O que foi bem feito esta semana - cite dados espec√≠ficos]

## üîç Insights Identificados
[3-4 insights baseados nos dados, sempre citando a fonte:]
- **Insight sobre h√°bitos:** [observa√ß√£o] *(baseado na performance: X/7 dias)*
- **Insight sobre peso:** [observa√ß√£o] *(baseado nos dados: Xkg‚ÜíYkg)*  
- **Insight comportamental:** [observa√ß√£o] *(baseado na observa√ß√£o: "texto")*
- **Insight emocional:** [observa√ß√£o] *(baseado no sentimento: X)*

## üí° Sugest√µes Pr√°ticas
[2-3 a√ß√µes espec√≠ficas para melhorar]

## üöÄ Motiva√ß√£o
[Mensagem encorajadora para pr√≥xima semana]

IMPORTANTE: Sempre cite a fonte dos dados entre par√™nteses. Limite: 350 palavras, tom amig√°vel.`;

  return prompt;
};

// Fun√ß√£o para gerar sugest√µes de coment√°rios para h√°bitos
export const generateHabitSuggestions = async (habitName, performanceData) => {
  try {
    const prompt = `
Como coach de h√°bitos, sugira 3 coment√°rios reflexivos (m√°ximo 20 palavras cada) para o h√°bito "${habitName}" baseado nesta performance:

Dias completados esta semana: ${performanceData.completedDays}/7
Porcentagem: ${performanceData.percentage}%
Tend√™ncia: ${performanceData.trend || 'est√°vel'}

Formate como lista simples:
- Sugest√£o 1
- Sugest√£o 2  
- Sugest√£o 3

Seja espec√≠fico, construtivo e focado em a√ß√µes pr√°ticas.`;

    const response = await fetch(`${AI_BASE_URL}/api/claude`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({ prompt })
    });

    if (!response.ok) {
      throw new Error(`Erro na API: ${response.status}`);
    }

    const data = await response.json();
    
    // Extrair sugest√µes da resposta
    const suggestions = data.response
      .split('\n')
      .filter(line => line.trim().startsWith('-'))
      .map(line => line.replace(/^-\s*/, '').trim())
      .slice(0, 3);

    return {
      success: true,
      suggestions,
      habitName
    };

  } catch (error) {
    console.error('‚ùå Erro ao gerar sugest√µes:', error);
    return {
      success: false,
      error: error.message,
      suggestions: [
        'Reflita sobre os obst√°culos enfrentados',
        'Identifique o que funcionou bem',
        'Planeje ajustes para a pr√≥xima semana'
      ]
    };
  }
};

export default {
  generateDebriefingInsights,
  generateHabitSuggestions
};